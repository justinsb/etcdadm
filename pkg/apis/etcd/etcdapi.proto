syntax = "proto3";
package etcd;

option go_package = "kope.io/etcd-manager/pkg/apis/etcd";

message ClusterSpec {
    int32 member_count = 1;
    string etcd_version = 2;
}

service EtcdManagerService {
    // GetInfo gets info about the node
    rpc GetInfo (GetInfoRequest) returns (GetInfoResponse);

    // JoinCluster requests that the node join an existing cluster
    rpc JoinCluster (JoinClusterRequest) returns (JoinClusterResponse);

    // Reconfigure changes the configuration of an existing node, primarily for a version upgrade/downgrade
    rpc Reconfigure (ReconfigureRequest) returns (ReconfigureResponse);

    // DoBackup requests that the node backup etcd
    rpc DoBackup (DoBackupRequest) returns (DoBackupResponse);
}

enum Phase {
    PHASE_UNKNOWN = 0;
    PHASE_PREPARE = 1;
    PHASE_INITIAL_CLUSTER = 2;
    PHASE_JOIN_EXISTING = 3;
}

message GetInfoRequest {
}

message GetInfoResponse {
//    string node_name = 1;
    string cluster_name = 2;

//// If the node is running etcd, cluster_configuration holds the cluster configuration
//    EtcdCluster cluster_configuration = 3;

    bool etcd_configured = 3;
    string cluster_token = 4;

    EtcdNode node_configuration = 5;
    string etcd_version = 6;
}

message DoBackupRequest {
    string leadership_token = 1;

    string storage = 2;

    string cluster_name = 3;

    ClusterSpec state = 10;
}

message DoBackupResponse {
    string name = 1;
}

message JoinClusterRequest {
//    EtcdCluster cluster = 1;
    string leadership_token = 1;

    Phase phase = 2;
    string cluster_name = 3;
    string cluster_token = 4;
    repeated EtcdNode nodes = 5;

    EtcdNode add_node = 6;
}

//enum JoinResult {
//    JOINRESULT_UNKNOWN = 0;
//    JOINRESULT_OK = 1;
//}

message JoinClusterResponse {
//    EtcdNode node = 1;
//    JoinResult result = 2;
}


message ReconfigureRequest {
    string leadership_token = 1;

    string cluster_name = 3;
//    string cluster_token = 4;
//    repeated EtcdNode nodes = 5;
//
//    EtcdNode add_node = 6;

    string etcd_version = 10;
}

message ReconfigureResponse {
}

message EtcdCluster {
    int32 desired_cluster_size = 1;

//    int32 peer_port = 2;
//    int32 client_port = 3;
//    string cluster_name = 4;
    string cluster_token = 5;

    EtcdNode me = 6;
    repeated EtcdNode nodes = 7;
}

message EtcdNode {
    string name = 1;
    repeated string peer_urls = 2;
    repeated string client_urls = 3;
    string etcd_version = 4;
}

message EtcdState {
    bool new_cluster = 1;
    EtcdCluster cluster = 2;
}
