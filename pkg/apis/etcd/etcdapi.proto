syntax = "proto3";
package etcd;

option go_package = "kope.io/etcd-manager/pkg/apis/etcd";

message ClusterSpec {
    int32 member_count = 1;
    string etcd_version = 2;
}

service EtcdManagerService {
    // GetInfo gets info about the node
    rpc GetInfo (GetInfoRequest) returns (GetInfoResponse);

    // JoinCluster requests that the node join an existing cluster
    rpc JoinCluster (JoinClusterRequest) returns (JoinClusterResponse);

    // Reconfigure changes the configuration of an existing node, primarily for a version upgrade/downgrade
    rpc Reconfigure (ReconfigureRequest) returns (ReconfigureResponse);

    // DoBackup requests that the node backup etcd
    rpc DoBackup (DoBackupRequest) returns (DoBackupResponse);

    // DoRestore requests that the node restores an etcd backup
    rpc DoRestore (DoRestoreRequest) returns (DoRestoreResponse);

    // StopEtcd requests that the node no longer run etcd.
    // Typically the node will already have been removed from the etcd cluster.
    rpc StopEtcd(StopEtcdRequest) returns (StopEtcdResponse);
}

enum Phase {
    PHASE_UNKNOWN = 0;
    PHASE_PREPARE = 1;
    PHASE_INITIAL_CLUSTER = 2;
    PHASE_JOIN_EXISTING = 3;
}

message GetInfoRequest {
}

message GetInfoResponse {
    string cluster_name = 2;

//    bool etcd_configured = 3;
//    string cluster_token = 4;

    EtcdNode node_configuration = 5;
    EtcdState etcd_state = 6;
}

message BackupInfo {
    string etcd_version = 1;
    int64 timestamp = 2;
    ClusterSpec cluster_spec = 3;
}

message CommonRequestHeader {
    string leadership_token = 1;
    string cluster_name = 2;
}

message DoBackupRequest {
    CommonRequestHeader header = 1;

    string storage = 2;

    // If allow_offline_backup is true, backup will be permitted even if etcd is not running on the node
    bool allow_offline_backup = 4;

    BackupInfo info = 10;
}

message DoBackupResponse {
    string name = 1;
}


message DoRestoreRequest {
    CommonRequestHeader header = 1;

    string storage = 2;

    string backup_name = 4;
}

message DoRestoreResponse {
}


message StopEtcdRequest {
    CommonRequestHeader header = 1;
}

message StopEtcdResponse {
}

message JoinClusterRequest {
    CommonRequestHeader header = 1;

    Phase phase = 2;
    string cluster_token = 4;
    repeated EtcdNode nodes = 5;

    EtcdNode add_node = 6;

    string etcd_version = 7;
}

//enum JoinResult {
//    JOINRESULT_UNKNOWN = 0;
//    JOINRESULT_OK = 1;
//}

message JoinClusterResponse {
//    EtcdNode node = 1;
//    JoinResult result = 2;
}


message ReconfigureRequest {
    CommonRequestHeader header = 1;

    string etcd_version = 10;

    // Note that because this is bool this must always be specified
    bool quarantined = 11;
}

message ReconfigureResponse {
}

message EtcdCluster {
    int32 desired_cluster_size = 1;

//    int32 peer_port = 2;
//    int32 client_port = 3;
//    string cluster_name = 4;
    string cluster_token = 5;

    string my_id = 6;
    repeated EtcdNode nodes = 7;
}

//message EtcdNode {
//    string name = 1;
//    repeated string peer_urls = 2;
//    repeated string client_urls = 3;
//}

message EtcdNode {
    string name = 1;
    repeated string peer_urls = 2;
    repeated string client_urls = 3;
    repeated string quarantined_client_urls = 4;
}

message EtcdState {
    bool new_cluster = 1;
    EtcdCluster cluster = 2;
    string etcd_version = 3;
    bool quarantined = 4;
}
