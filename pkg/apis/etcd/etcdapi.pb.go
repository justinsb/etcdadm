// Code generated by protoc-gen-go. DO NOT EDIT.
// source: pkg/apis/etcd/etcdapi.proto

/*
Package etcd is a generated protocol buffer package.

It is generated from these files:
	pkg/apis/etcd/etcdapi.proto

It has these top-level messages:
	ClusterSpec
	Command
	RestoreBackupCommand
	CreateNewClusterCommand
	GetInfoRequest
	GetInfoResponse
	UpdateEndpointsRequest
	MemberMap
	MemberMapInfo
	UpdateEndpointsResponse
	BackupInfo
	CommonRequestHeader
	DoBackupRequest
	DoBackupResponse
	DoRestoreRequest
	DoRestoreResponse
	StopEtcdRequest
	StopEtcdResponse
	JoinClusterRequest
	JoinClusterResponse
	ReconfigureRequest
	ReconfigureResponse
	EtcdCluster
	EtcdNode
	EtcdState
*/
package etcd

import proto "github.com/golang/protobuf/proto"
import fmt "fmt"
import math "math"

import (
	context "golang.org/x/net/context"
	grpc "google.golang.org/grpc"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.ProtoPackageIsVersion2 // please upgrade the proto package

type Phase int32

const (
	Phase_PHASE_UNKNOWN         Phase = 0
	Phase_PHASE_PREPARE         Phase = 1
	Phase_PHASE_INITIAL_CLUSTER Phase = 2
	Phase_PHASE_JOIN_EXISTING   Phase = 3
)

var Phase_name = map[int32]string{
	0: "PHASE_UNKNOWN",
	1: "PHASE_PREPARE",
	2: "PHASE_INITIAL_CLUSTER",
	3: "PHASE_JOIN_EXISTING",
}
var Phase_value = map[string]int32{
	"PHASE_UNKNOWN":         0,
	"PHASE_PREPARE":         1,
	"PHASE_INITIAL_CLUSTER": 2,
	"PHASE_JOIN_EXISTING":   3,
}

func (x Phase) String() string {
	return proto.EnumName(Phase_name, int32(x))
}
func (Phase) EnumDescriptor() ([]byte, []int) { return fileDescriptor0, []int{0} }

type ClusterSpec struct {
	MemberCount int32  `protobuf:"varint,1,opt,name=member_count,json=memberCount" json:"member_count,omitempty"`
	EtcdVersion string `protobuf:"bytes,2,opt,name=etcd_version,json=etcdVersion" json:"etcd_version,omitempty"`
}

func (m *ClusterSpec) Reset()                    { *m = ClusterSpec{} }
func (m *ClusterSpec) String() string            { return proto.CompactTextString(m) }
func (*ClusterSpec) ProtoMessage()               {}
func (*ClusterSpec) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{0} }

func (m *ClusterSpec) GetMemberCount() int32 {
	if m != nil {
		return m.MemberCount
	}
	return 0
}

func (m *ClusterSpec) GetEtcdVersion() string {
	if m != nil {
		return m.EtcdVersion
	}
	return ""
}

type Command struct {
	Timestamp int64 `protobuf:"varint,1,opt,name=timestamp" json:"timestamp,omitempty"`
	// If restore backup is set, this indicates a request to restore the specified backup
	// This is not normally safe (potential for data loss if the backup is out of date),
	// but either the administrator can set this in a DR scenario,
	// or we set it ourselves immediately after having performed a quarantined backup
	RestoreBackup *RestoreBackupCommand `protobuf:"bytes,10,opt,name=restore_backup,json=restoreBackup" json:"restore_backup,omitempty"`
}

func (m *Command) Reset()                    { *m = Command{} }
func (m *Command) String() string            { return proto.CompactTextString(m) }
func (*Command) ProtoMessage()               {}
func (*Command) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{1} }

func (m *Command) GetTimestamp() int64 {
	if m != nil {
		return m.Timestamp
	}
	return 0
}

func (m *Command) GetRestoreBackup() *RestoreBackupCommand {
	if m != nil {
		return m.RestoreBackup
	}
	return nil
}

type RestoreBackupCommand struct {
	// The new cluster spec we should restore into
	ClusterSpec *ClusterSpec `protobuf:"bytes,1,opt,name=cluster_spec,json=clusterSpec" json:"cluster_spec,omitempty"`
	Backup      string       `protobuf:"bytes,3,opt,name=backup" json:"backup,omitempty"`
}

func (m *RestoreBackupCommand) Reset()                    { *m = RestoreBackupCommand{} }
func (m *RestoreBackupCommand) String() string            { return proto.CompactTextString(m) }
func (*RestoreBackupCommand) ProtoMessage()               {}
func (*RestoreBackupCommand) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{2} }

func (m *RestoreBackupCommand) GetClusterSpec() *ClusterSpec {
	if m != nil {
		return m.ClusterSpec
	}
	return nil
}

func (m *RestoreBackupCommand) GetBackup() string {
	if m != nil {
		return m.Backup
	}
	return ""
}

type CreateNewClusterCommand struct {
	ClusterSpec *ClusterSpec `protobuf:"bytes,1,opt,name=cluster_spec,json=clusterSpec" json:"cluster_spec,omitempty"`
}

func (m *CreateNewClusterCommand) Reset()                    { *m = CreateNewClusterCommand{} }
func (m *CreateNewClusterCommand) String() string            { return proto.CompactTextString(m) }
func (*CreateNewClusterCommand) ProtoMessage()               {}
func (*CreateNewClusterCommand) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{3} }

func (m *CreateNewClusterCommand) GetClusterSpec() *ClusterSpec {
	if m != nil {
		return m.ClusterSpec
	}
	return nil
}

type GetInfoRequest struct {
}

func (m *GetInfoRequest) Reset()                    { *m = GetInfoRequest{} }
func (m *GetInfoRequest) String() string            { return proto.CompactTextString(m) }
func (*GetInfoRequest) ProtoMessage()               {}
func (*GetInfoRequest) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{4} }

type GetInfoResponse struct {
	ClusterName       string     `protobuf:"bytes,2,opt,name=cluster_name,json=clusterName" json:"cluster_name,omitempty"`
	NodeConfiguration *EtcdNode  `protobuf:"bytes,5,opt,name=node_configuration,json=nodeConfiguration" json:"node_configuration,omitempty"`
	EtcdState         *EtcdState `protobuf:"bytes,6,opt,name=etcd_state,json=etcdState" json:"etcd_state,omitempty"`
}

func (m *GetInfoResponse) Reset()                    { *m = GetInfoResponse{} }
func (m *GetInfoResponse) String() string            { return proto.CompactTextString(m) }
func (*GetInfoResponse) ProtoMessage()               {}
func (*GetInfoResponse) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{5} }

func (m *GetInfoResponse) GetClusterName() string {
	if m != nil {
		return m.ClusterName
	}
	return ""
}

func (m *GetInfoResponse) GetNodeConfiguration() *EtcdNode {
	if m != nil {
		return m.NodeConfiguration
	}
	return nil
}

func (m *GetInfoResponse) GetEtcdState() *EtcdState {
	if m != nil {
		return m.EtcdState
	}
	return nil
}

type UpdateEndpointsRequest struct {
	// Contains information about the current nodes
	// It can be used for nodes to update /etc/hosts
	MemberMap *MemberMap `protobuf:"bytes,1,opt,name=member_map,json=memberMap" json:"member_map,omitempty"`
}

func (m *UpdateEndpointsRequest) Reset()                    { *m = UpdateEndpointsRequest{} }
func (m *UpdateEndpointsRequest) String() string            { return proto.CompactTextString(m) }
func (*UpdateEndpointsRequest) ProtoMessage()               {}
func (*UpdateEndpointsRequest) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{6} }

func (m *UpdateEndpointsRequest) GetMemberMap() *MemberMap {
	if m != nil {
		return m.MemberMap
	}
	return nil
}

type MemberMap struct {
	Members []*MemberMapInfo `protobuf:"bytes,1,rep,name=members" json:"members,omitempty"`
}

func (m *MemberMap) Reset()                    { *m = MemberMap{} }
func (m *MemberMap) String() string            { return proto.CompactTextString(m) }
func (*MemberMap) ProtoMessage()               {}
func (*MemberMap) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{7} }

func (m *MemberMap) GetMembers() []*MemberMapInfo {
	if m != nil {
		return m.Members
	}
	return nil
}

type MemberMapInfo struct {
	Name      string   `protobuf:"bytes,1,opt,name=name" json:"name,omitempty"`
	Dns       string   `protobuf:"bytes,2,opt,name=dns" json:"dns,omitempty"`
	Addresses []string `protobuf:"bytes,3,rep,name=addresses" json:"addresses,omitempty"`
}

func (m *MemberMapInfo) Reset()                    { *m = MemberMapInfo{} }
func (m *MemberMapInfo) String() string            { return proto.CompactTextString(m) }
func (*MemberMapInfo) ProtoMessage()               {}
func (*MemberMapInfo) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{8} }

func (m *MemberMapInfo) GetName() string {
	if m != nil {
		return m.Name
	}
	return ""
}

func (m *MemberMapInfo) GetDns() string {
	if m != nil {
		return m.Dns
	}
	return ""
}

func (m *MemberMapInfo) GetAddresses() []string {
	if m != nil {
		return m.Addresses
	}
	return nil
}

type UpdateEndpointsResponse struct {
}

func (m *UpdateEndpointsResponse) Reset()                    { *m = UpdateEndpointsResponse{} }
func (m *UpdateEndpointsResponse) String() string            { return proto.CompactTextString(m) }
func (*UpdateEndpointsResponse) ProtoMessage()               {}
func (*UpdateEndpointsResponse) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{9} }

type BackupInfo struct {
	EtcdVersion string       `protobuf:"bytes,1,opt,name=etcd_version,json=etcdVersion" json:"etcd_version,omitempty"`
	Timestamp   int64        `protobuf:"varint,2,opt,name=timestamp" json:"timestamp,omitempty"`
	ClusterSpec *ClusterSpec `protobuf:"bytes,3,opt,name=cluster_spec,json=clusterSpec" json:"cluster_spec,omitempty"`
}

func (m *BackupInfo) Reset()                    { *m = BackupInfo{} }
func (m *BackupInfo) String() string            { return proto.CompactTextString(m) }
func (*BackupInfo) ProtoMessage()               {}
func (*BackupInfo) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{10} }

func (m *BackupInfo) GetEtcdVersion() string {
	if m != nil {
		return m.EtcdVersion
	}
	return ""
}

func (m *BackupInfo) GetTimestamp() int64 {
	if m != nil {
		return m.Timestamp
	}
	return 0
}

func (m *BackupInfo) GetClusterSpec() *ClusterSpec {
	if m != nil {
		return m.ClusterSpec
	}
	return nil
}

type CommonRequestHeader struct {
	LeadershipToken string `protobuf:"bytes,1,opt,name=leadership_token,json=leadershipToken" json:"leadership_token,omitempty"`
	ClusterName     string `protobuf:"bytes,2,opt,name=cluster_name,json=clusterName" json:"cluster_name,omitempty"`
}

func (m *CommonRequestHeader) Reset()                    { *m = CommonRequestHeader{} }
func (m *CommonRequestHeader) String() string            { return proto.CompactTextString(m) }
func (*CommonRequestHeader) ProtoMessage()               {}
func (*CommonRequestHeader) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{11} }

func (m *CommonRequestHeader) GetLeadershipToken() string {
	if m != nil {
		return m.LeadershipToken
	}
	return ""
}

func (m *CommonRequestHeader) GetClusterName() string {
	if m != nil {
		return m.ClusterName
	}
	return ""
}

type DoBackupRequest struct {
	Header  *CommonRequestHeader `protobuf:"bytes,1,opt,name=header" json:"header,omitempty"`
	Storage string               `protobuf:"bytes,2,opt,name=storage" json:"storage,omitempty"`
	// If allow_offline_backup is true, backup will be permitted even if etcd is not running on the node
	AllowOfflineBackup bool        `protobuf:"varint,4,opt,name=allow_offline_backup,json=allowOfflineBackup" json:"allow_offline_backup,omitempty"`
	Info               *BackupInfo `protobuf:"bytes,10,opt,name=info" json:"info,omitempty"`
}

func (m *DoBackupRequest) Reset()                    { *m = DoBackupRequest{} }
func (m *DoBackupRequest) String() string            { return proto.CompactTextString(m) }
func (*DoBackupRequest) ProtoMessage()               {}
func (*DoBackupRequest) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{12} }

func (m *DoBackupRequest) GetHeader() *CommonRequestHeader {
	if m != nil {
		return m.Header
	}
	return nil
}

func (m *DoBackupRequest) GetStorage() string {
	if m != nil {
		return m.Storage
	}
	return ""
}

func (m *DoBackupRequest) GetAllowOfflineBackup() bool {
	if m != nil {
		return m.AllowOfflineBackup
	}
	return false
}

func (m *DoBackupRequest) GetInfo() *BackupInfo {
	if m != nil {
		return m.Info
	}
	return nil
}

type DoBackupResponse struct {
	Name string `protobuf:"bytes,1,opt,name=name" json:"name,omitempty"`
}

func (m *DoBackupResponse) Reset()                    { *m = DoBackupResponse{} }
func (m *DoBackupResponse) String() string            { return proto.CompactTextString(m) }
func (*DoBackupResponse) ProtoMessage()               {}
func (*DoBackupResponse) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{13} }

func (m *DoBackupResponse) GetName() string {
	if m != nil {
		return m.Name
	}
	return ""
}

type DoRestoreRequest struct {
	Header     *CommonRequestHeader `protobuf:"bytes,1,opt,name=header" json:"header,omitempty"`
	Storage    string               `protobuf:"bytes,2,opt,name=storage" json:"storage,omitempty"`
	BackupName string               `protobuf:"bytes,4,opt,name=backup_name,json=backupName" json:"backup_name,omitempty"`
}

func (m *DoRestoreRequest) Reset()                    { *m = DoRestoreRequest{} }
func (m *DoRestoreRequest) String() string            { return proto.CompactTextString(m) }
func (*DoRestoreRequest) ProtoMessage()               {}
func (*DoRestoreRequest) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{14} }

func (m *DoRestoreRequest) GetHeader() *CommonRequestHeader {
	if m != nil {
		return m.Header
	}
	return nil
}

func (m *DoRestoreRequest) GetStorage() string {
	if m != nil {
		return m.Storage
	}
	return ""
}

func (m *DoRestoreRequest) GetBackupName() string {
	if m != nil {
		return m.BackupName
	}
	return ""
}

type DoRestoreResponse struct {
}

func (m *DoRestoreResponse) Reset()                    { *m = DoRestoreResponse{} }
func (m *DoRestoreResponse) String() string            { return proto.CompactTextString(m) }
func (*DoRestoreResponse) ProtoMessage()               {}
func (*DoRestoreResponse) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{15} }

type StopEtcdRequest struct {
	Header *CommonRequestHeader `protobuf:"bytes,1,opt,name=header" json:"header,omitempty"`
}

func (m *StopEtcdRequest) Reset()                    { *m = StopEtcdRequest{} }
func (m *StopEtcdRequest) String() string            { return proto.CompactTextString(m) }
func (*StopEtcdRequest) ProtoMessage()               {}
func (*StopEtcdRequest) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{16} }

func (m *StopEtcdRequest) GetHeader() *CommonRequestHeader {
	if m != nil {
		return m.Header
	}
	return nil
}

type StopEtcdResponse struct {
}

func (m *StopEtcdResponse) Reset()                    { *m = StopEtcdResponse{} }
func (m *StopEtcdResponse) String() string            { return proto.CompactTextString(m) }
func (*StopEtcdResponse) ProtoMessage()               {}
func (*StopEtcdResponse) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{17} }

type JoinClusterRequest struct {
	Header       *CommonRequestHeader `protobuf:"bytes,1,opt,name=header" json:"header,omitempty"`
	Phase        Phase                `protobuf:"varint,2,opt,name=phase,enum=etcd.Phase" json:"phase,omitempty"`
	ClusterToken string               `protobuf:"bytes,4,opt,name=cluster_token,json=clusterToken" json:"cluster_token,omitempty"`
	Nodes        []*EtcdNode          `protobuf:"bytes,5,rep,name=nodes" json:"nodes,omitempty"`
	AddNode      *EtcdNode            `protobuf:"bytes,6,opt,name=add_node,json=addNode" json:"add_node,omitempty"`
	EtcdVersion  string               `protobuf:"bytes,7,opt,name=etcd_version,json=etcdVersion" json:"etcd_version,omitempty"`
}

func (m *JoinClusterRequest) Reset()                    { *m = JoinClusterRequest{} }
func (m *JoinClusterRequest) String() string            { return proto.CompactTextString(m) }
func (*JoinClusterRequest) ProtoMessage()               {}
func (*JoinClusterRequest) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{18} }

func (m *JoinClusterRequest) GetHeader() *CommonRequestHeader {
	if m != nil {
		return m.Header
	}
	return nil
}

func (m *JoinClusterRequest) GetPhase() Phase {
	if m != nil {
		return m.Phase
	}
	return Phase_PHASE_UNKNOWN
}

func (m *JoinClusterRequest) GetClusterToken() string {
	if m != nil {
		return m.ClusterToken
	}
	return ""
}

func (m *JoinClusterRequest) GetNodes() []*EtcdNode {
	if m != nil {
		return m.Nodes
	}
	return nil
}

func (m *JoinClusterRequest) GetAddNode() *EtcdNode {
	if m != nil {
		return m.AddNode
	}
	return nil
}

func (m *JoinClusterRequest) GetEtcdVersion() string {
	if m != nil {
		return m.EtcdVersion
	}
	return ""
}

type JoinClusterResponse struct {
}

func (m *JoinClusterResponse) Reset()                    { *m = JoinClusterResponse{} }
func (m *JoinClusterResponse) String() string            { return proto.CompactTextString(m) }
func (*JoinClusterResponse) ProtoMessage()               {}
func (*JoinClusterResponse) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{19} }

type ReconfigureRequest struct {
	Header      *CommonRequestHeader `protobuf:"bytes,1,opt,name=header" json:"header,omitempty"`
	EtcdVersion string               `protobuf:"bytes,10,opt,name=etcd_version,json=etcdVersion" json:"etcd_version,omitempty"`
	// Note that because this is bool this must always be specified
	Quarantined bool `protobuf:"varint,11,opt,name=quarantined" json:"quarantined,omitempty"`
}

func (m *ReconfigureRequest) Reset()                    { *m = ReconfigureRequest{} }
func (m *ReconfigureRequest) String() string            { return proto.CompactTextString(m) }
func (*ReconfigureRequest) ProtoMessage()               {}
func (*ReconfigureRequest) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{20} }

func (m *ReconfigureRequest) GetHeader() *CommonRequestHeader {
	if m != nil {
		return m.Header
	}
	return nil
}

func (m *ReconfigureRequest) GetEtcdVersion() string {
	if m != nil {
		return m.EtcdVersion
	}
	return ""
}

func (m *ReconfigureRequest) GetQuarantined() bool {
	if m != nil {
		return m.Quarantined
	}
	return false
}

type ReconfigureResponse struct {
}

func (m *ReconfigureResponse) Reset()                    { *m = ReconfigureResponse{} }
func (m *ReconfigureResponse) String() string            { return proto.CompactTextString(m) }
func (*ReconfigureResponse) ProtoMessage()               {}
func (*ReconfigureResponse) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{21} }

type EtcdCluster struct {
	DesiredClusterSize int32 `protobuf:"varint,1,opt,name=desired_cluster_size,json=desiredClusterSize" json:"desired_cluster_size,omitempty"`
	//    int32 peer_port = 2;
	//    int32 client_port = 3;
	//    string cluster_name = 4;
	ClusterToken string `protobuf:"bytes,5,opt,name=cluster_token,json=clusterToken" json:"cluster_token,omitempty"`
	// string my_id = 6;
	Nodes []*EtcdNode `protobuf:"bytes,7,rep,name=nodes" json:"nodes,omitempty"`
}

func (m *EtcdCluster) Reset()                    { *m = EtcdCluster{} }
func (m *EtcdCluster) String() string            { return proto.CompactTextString(m) }
func (*EtcdCluster) ProtoMessage()               {}
func (*EtcdCluster) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{22} }

func (m *EtcdCluster) GetDesiredClusterSize() int32 {
	if m != nil {
		return m.DesiredClusterSize
	}
	return 0
}

func (m *EtcdCluster) GetClusterToken() string {
	if m != nil {
		return m.ClusterToken
	}
	return ""
}

func (m *EtcdCluster) GetNodes() []*EtcdNode {
	if m != nil {
		return m.Nodes
	}
	return nil
}

type EtcdNode struct {
	Name                  string   `protobuf:"bytes,1,opt,name=name" json:"name,omitempty"`
	PeerUrls              []string `protobuf:"bytes,2,rep,name=peer_urls,json=peerUrls" json:"peer_urls,omitempty"`
	ClientUrls            []string `protobuf:"bytes,3,rep,name=client_urls,json=clientUrls" json:"client_urls,omitempty"`
	QuarantinedClientUrls []string `protobuf:"bytes,4,rep,name=quarantined_client_urls,json=quarantinedClientUrls" json:"quarantined_client_urls,omitempty"`
}

func (m *EtcdNode) Reset()                    { *m = EtcdNode{} }
func (m *EtcdNode) String() string            { return proto.CompactTextString(m) }
func (*EtcdNode) ProtoMessage()               {}
func (*EtcdNode) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{23} }

func (m *EtcdNode) GetName() string {
	if m != nil {
		return m.Name
	}
	return ""
}

func (m *EtcdNode) GetPeerUrls() []string {
	if m != nil {
		return m.PeerUrls
	}
	return nil
}

func (m *EtcdNode) GetClientUrls() []string {
	if m != nil {
		return m.ClientUrls
	}
	return nil
}

func (m *EtcdNode) GetQuarantinedClientUrls() []string {
	if m != nil {
		return m.QuarantinedClientUrls
	}
	return nil
}

type EtcdState struct {
	NewCluster  bool         `protobuf:"varint,1,opt,name=new_cluster,json=newCluster" json:"new_cluster,omitempty"`
	Cluster     *EtcdCluster `protobuf:"bytes,2,opt,name=cluster" json:"cluster,omitempty"`
	EtcdVersion string       `protobuf:"bytes,3,opt,name=etcd_version,json=etcdVersion" json:"etcd_version,omitempty"`
	Quarantined bool         `protobuf:"varint,4,opt,name=quarantined" json:"quarantined,omitempty"`
}

func (m *EtcdState) Reset()                    { *m = EtcdState{} }
func (m *EtcdState) String() string            { return proto.CompactTextString(m) }
func (*EtcdState) ProtoMessage()               {}
func (*EtcdState) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{24} }

func (m *EtcdState) GetNewCluster() bool {
	if m != nil {
		return m.NewCluster
	}
	return false
}

func (m *EtcdState) GetCluster() *EtcdCluster {
	if m != nil {
		return m.Cluster
	}
	return nil
}

func (m *EtcdState) GetEtcdVersion() string {
	if m != nil {
		return m.EtcdVersion
	}
	return ""
}

func (m *EtcdState) GetQuarantined() bool {
	if m != nil {
		return m.Quarantined
	}
	return false
}

func init() {
	proto.RegisterType((*ClusterSpec)(nil), "etcd.ClusterSpec")
	proto.RegisterType((*Command)(nil), "etcd.Command")
	proto.RegisterType((*RestoreBackupCommand)(nil), "etcd.RestoreBackupCommand")
	proto.RegisterType((*CreateNewClusterCommand)(nil), "etcd.CreateNewClusterCommand")
	proto.RegisterType((*GetInfoRequest)(nil), "etcd.GetInfoRequest")
	proto.RegisterType((*GetInfoResponse)(nil), "etcd.GetInfoResponse")
	proto.RegisterType((*UpdateEndpointsRequest)(nil), "etcd.UpdateEndpointsRequest")
	proto.RegisterType((*MemberMap)(nil), "etcd.MemberMap")
	proto.RegisterType((*MemberMapInfo)(nil), "etcd.MemberMapInfo")
	proto.RegisterType((*UpdateEndpointsResponse)(nil), "etcd.UpdateEndpointsResponse")
	proto.RegisterType((*BackupInfo)(nil), "etcd.BackupInfo")
	proto.RegisterType((*CommonRequestHeader)(nil), "etcd.CommonRequestHeader")
	proto.RegisterType((*DoBackupRequest)(nil), "etcd.DoBackupRequest")
	proto.RegisterType((*DoBackupResponse)(nil), "etcd.DoBackupResponse")
	proto.RegisterType((*DoRestoreRequest)(nil), "etcd.DoRestoreRequest")
	proto.RegisterType((*DoRestoreResponse)(nil), "etcd.DoRestoreResponse")
	proto.RegisterType((*StopEtcdRequest)(nil), "etcd.StopEtcdRequest")
	proto.RegisterType((*StopEtcdResponse)(nil), "etcd.StopEtcdResponse")
	proto.RegisterType((*JoinClusterRequest)(nil), "etcd.JoinClusterRequest")
	proto.RegisterType((*JoinClusterResponse)(nil), "etcd.JoinClusterResponse")
	proto.RegisterType((*ReconfigureRequest)(nil), "etcd.ReconfigureRequest")
	proto.RegisterType((*ReconfigureResponse)(nil), "etcd.ReconfigureResponse")
	proto.RegisterType((*EtcdCluster)(nil), "etcd.EtcdCluster")
	proto.RegisterType((*EtcdNode)(nil), "etcd.EtcdNode")
	proto.RegisterType((*EtcdState)(nil), "etcd.EtcdState")
	proto.RegisterEnum("etcd.Phase", Phase_name, Phase_value)
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConn

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion4

// Client API for EtcdManagerService service

type EtcdManagerServiceClient interface {
	// GetInfo gets info about the node
	GetInfo(ctx context.Context, in *GetInfoRequest, opts ...grpc.CallOption) (*GetInfoResponse, error)
	// UpdateEndpoints is sent to peers so they can update their inter-cluster routing
	UpdateEndpoints(ctx context.Context, in *UpdateEndpointsRequest, opts ...grpc.CallOption) (*UpdateEndpointsResponse, error)
	// JoinCluster requests that the node join an existing cluster
	JoinCluster(ctx context.Context, in *JoinClusterRequest, opts ...grpc.CallOption) (*JoinClusterResponse, error)
	// Reconfigure changes the configuration of an existing node, primarily for a version upgrade/downgrade
	Reconfigure(ctx context.Context, in *ReconfigureRequest, opts ...grpc.CallOption) (*ReconfigureResponse, error)
	// DoBackup requests that the node backup etcd
	DoBackup(ctx context.Context, in *DoBackupRequest, opts ...grpc.CallOption) (*DoBackupResponse, error)
	// DoRestore requests that the node restores an etcd backup
	DoRestore(ctx context.Context, in *DoRestoreRequest, opts ...grpc.CallOption) (*DoRestoreResponse, error)
	// StopEtcd requests that the node no longer run etcd.
	// Typically the node will already have been removed from the etcd cluster.
	StopEtcd(ctx context.Context, in *StopEtcdRequest, opts ...grpc.CallOption) (*StopEtcdResponse, error)
}

type etcdManagerServiceClient struct {
	cc *grpc.ClientConn
}

func NewEtcdManagerServiceClient(cc *grpc.ClientConn) EtcdManagerServiceClient {
	return &etcdManagerServiceClient{cc}
}

func (c *etcdManagerServiceClient) GetInfo(ctx context.Context, in *GetInfoRequest, opts ...grpc.CallOption) (*GetInfoResponse, error) {
	out := new(GetInfoResponse)
	err := grpc.Invoke(ctx, "/etcd.EtcdManagerService/GetInfo", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *etcdManagerServiceClient) UpdateEndpoints(ctx context.Context, in *UpdateEndpointsRequest, opts ...grpc.CallOption) (*UpdateEndpointsResponse, error) {
	out := new(UpdateEndpointsResponse)
	err := grpc.Invoke(ctx, "/etcd.EtcdManagerService/UpdateEndpoints", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *etcdManagerServiceClient) JoinCluster(ctx context.Context, in *JoinClusterRequest, opts ...grpc.CallOption) (*JoinClusterResponse, error) {
	out := new(JoinClusterResponse)
	err := grpc.Invoke(ctx, "/etcd.EtcdManagerService/JoinCluster", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *etcdManagerServiceClient) Reconfigure(ctx context.Context, in *ReconfigureRequest, opts ...grpc.CallOption) (*ReconfigureResponse, error) {
	out := new(ReconfigureResponse)
	err := grpc.Invoke(ctx, "/etcd.EtcdManagerService/Reconfigure", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *etcdManagerServiceClient) DoBackup(ctx context.Context, in *DoBackupRequest, opts ...grpc.CallOption) (*DoBackupResponse, error) {
	out := new(DoBackupResponse)
	err := grpc.Invoke(ctx, "/etcd.EtcdManagerService/DoBackup", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *etcdManagerServiceClient) DoRestore(ctx context.Context, in *DoRestoreRequest, opts ...grpc.CallOption) (*DoRestoreResponse, error) {
	out := new(DoRestoreResponse)
	err := grpc.Invoke(ctx, "/etcd.EtcdManagerService/DoRestore", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *etcdManagerServiceClient) StopEtcd(ctx context.Context, in *StopEtcdRequest, opts ...grpc.CallOption) (*StopEtcdResponse, error) {
	out := new(StopEtcdResponse)
	err := grpc.Invoke(ctx, "/etcd.EtcdManagerService/StopEtcd", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// Server API for EtcdManagerService service

type EtcdManagerServiceServer interface {
	// GetInfo gets info about the node
	GetInfo(context.Context, *GetInfoRequest) (*GetInfoResponse, error)
	// UpdateEndpoints is sent to peers so they can update their inter-cluster routing
	UpdateEndpoints(context.Context, *UpdateEndpointsRequest) (*UpdateEndpointsResponse, error)
	// JoinCluster requests that the node join an existing cluster
	JoinCluster(context.Context, *JoinClusterRequest) (*JoinClusterResponse, error)
	// Reconfigure changes the configuration of an existing node, primarily for a version upgrade/downgrade
	Reconfigure(context.Context, *ReconfigureRequest) (*ReconfigureResponse, error)
	// DoBackup requests that the node backup etcd
	DoBackup(context.Context, *DoBackupRequest) (*DoBackupResponse, error)
	// DoRestore requests that the node restores an etcd backup
	DoRestore(context.Context, *DoRestoreRequest) (*DoRestoreResponse, error)
	// StopEtcd requests that the node no longer run etcd.
	// Typically the node will already have been removed from the etcd cluster.
	StopEtcd(context.Context, *StopEtcdRequest) (*StopEtcdResponse, error)
}

func RegisterEtcdManagerServiceServer(s *grpc.Server, srv EtcdManagerServiceServer) {
	s.RegisterService(&_EtcdManagerService_serviceDesc, srv)
}

func _EtcdManagerService_GetInfo_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetInfoRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(EtcdManagerServiceServer).GetInfo(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/etcd.EtcdManagerService/GetInfo",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(EtcdManagerServiceServer).GetInfo(ctx, req.(*GetInfoRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _EtcdManagerService_UpdateEndpoints_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdateEndpointsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(EtcdManagerServiceServer).UpdateEndpoints(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/etcd.EtcdManagerService/UpdateEndpoints",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(EtcdManagerServiceServer).UpdateEndpoints(ctx, req.(*UpdateEndpointsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _EtcdManagerService_JoinCluster_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(JoinClusterRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(EtcdManagerServiceServer).JoinCluster(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/etcd.EtcdManagerService/JoinCluster",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(EtcdManagerServiceServer).JoinCluster(ctx, req.(*JoinClusterRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _EtcdManagerService_Reconfigure_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ReconfigureRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(EtcdManagerServiceServer).Reconfigure(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/etcd.EtcdManagerService/Reconfigure",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(EtcdManagerServiceServer).Reconfigure(ctx, req.(*ReconfigureRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _EtcdManagerService_DoBackup_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DoBackupRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(EtcdManagerServiceServer).DoBackup(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/etcd.EtcdManagerService/DoBackup",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(EtcdManagerServiceServer).DoBackup(ctx, req.(*DoBackupRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _EtcdManagerService_DoRestore_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DoRestoreRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(EtcdManagerServiceServer).DoRestore(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/etcd.EtcdManagerService/DoRestore",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(EtcdManagerServiceServer).DoRestore(ctx, req.(*DoRestoreRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _EtcdManagerService_StopEtcd_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(StopEtcdRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(EtcdManagerServiceServer).StopEtcd(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/etcd.EtcdManagerService/StopEtcd",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(EtcdManagerServiceServer).StopEtcd(ctx, req.(*StopEtcdRequest))
	}
	return interceptor(ctx, in, info, handler)
}

var _EtcdManagerService_serviceDesc = grpc.ServiceDesc{
	ServiceName: "etcd.EtcdManagerService",
	HandlerType: (*EtcdManagerServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "GetInfo",
			Handler:    _EtcdManagerService_GetInfo_Handler,
		},
		{
			MethodName: "UpdateEndpoints",
			Handler:    _EtcdManagerService_UpdateEndpoints_Handler,
		},
		{
			MethodName: "JoinCluster",
			Handler:    _EtcdManagerService_JoinCluster_Handler,
		},
		{
			MethodName: "Reconfigure",
			Handler:    _EtcdManagerService_Reconfigure_Handler,
		},
		{
			MethodName: "DoBackup",
			Handler:    _EtcdManagerService_DoBackup_Handler,
		},
		{
			MethodName: "DoRestore",
			Handler:    _EtcdManagerService_DoRestore_Handler,
		},
		{
			MethodName: "StopEtcd",
			Handler:    _EtcdManagerService_StopEtcd_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "pkg/apis/etcd/etcdapi.proto",
}

func init() { proto.RegisterFile("pkg/apis/etcd/etcdapi.proto", fileDescriptor0) }

var fileDescriptor0 = []byte{
	// 1153 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0xb4, 0x56, 0x5d, 0x6f, 0xe3, 0x44,
	0x17, 0x7e, 0xdd, 0x24, 0x4d, 0x72, 0xbc, 0x6d, 0xd2, 0xe9, 0xb6, 0x4d, 0xb3, 0xfb, 0x8a, 0xac,
	0xa9, 0x50, 0x16, 0xb4, 0x2d, 0x14, 0xb4, 0x12, 0x08, 0x2e, 0xda, 0x6c, 0xb4, 0xcd, 0xb2, 0x4d,
	0x2b, 0xa7, 0x05, 0xc4, 0x8d, 0x35, 0xb5, 0x4f, 0x5b, 0xd3, 0xd8, 0xe3, 0xb5, 0x9d, 0xad, 0xb4,
	0x57, 0x48, 0xdc, 0x21, 0x2e, 0xb9, 0xe6, 0x86, 0xff, 0xc0, 0x6f, 0xe1, 0xe7, 0xa0, 0xf9, 0x4a,
	0x1c, 0x3b, 0x2c, 0x2b, 0x2a, 0x6e, 0xac, 0xf1, 0x73, 0xce, 0x9c, 0x39, 0x9f, 0xcf, 0x0c, 0x3c,
	0x88, 0x6e, 0xae, 0xf6, 0x68, 0xe4, 0x27, 0x7b, 0x98, 0xba, 0x9e, 0xf8, 0xd0, 0xc8, 0xdf, 0x8d,
	0x62, 0x96, 0x32, 0x52, 0xe6, 0xbf, 0xd6, 0x08, 0xcc, 0xde, 0x78, 0x92, 0xa4, 0x18, 0x8f, 0x22,
	0x74, 0xc9, 0x23, 0xb8, 0x17, 0x60, 0x70, 0x81, 0xb1, 0xe3, 0xb2, 0x49, 0x98, 0xb6, 0x8c, 0x8e,
	0xd1, 0xad, 0xd8, 0xa6, 0xc4, 0x7a, 0x1c, 0xe2, 0x2a, 0x7c, 0xa7, 0xf3, 0x1a, 0xe3, 0xc4, 0x67,
	0x61, 0x6b, 0xa9, 0x63, 0x74, 0xeb, 0xb6, 0xc9, 0xb1, 0x6f, 0x24, 0x64, 0xfd, 0x00, 0xd5, 0x1e,
	0x0b, 0x02, 0x1a, 0x7a, 0xe4, 0x21, 0xd4, 0x53, 0x3f, 0xc0, 0x24, 0xa5, 0x41, 0x24, 0xac, 0x95,
	0xec, 0x19, 0x40, 0x0e, 0x60, 0x35, 0xc6, 0x24, 0x65, 0x31, 0x3a, 0x17, 0xd4, 0xbd, 0x99, 0x44,
	0x2d, 0xe8, 0x18, 0x5d, 0x73, 0xbf, 0xbd, 0xcb, 0xcd, 0xed, 0xda, 0x52, 0x76, 0x28, 0x44, 0xca,
	0xa2, 0xbd, 0x12, 0x67, 0x51, 0xcb, 0x83, 0xfb, 0x8b, 0xd4, 0xc8, 0x67, 0x70, 0xcf, 0x95, 0x81,
	0x39, 0x49, 0x84, 0xae, 0x38, 0xdb, 0xdc, 0x5f, 0x93, 0x86, 0x33, 0x21, 0xdb, 0xa6, 0x9b, 0x89,
	0x7f, 0x13, 0x96, 0x95, 0x23, 0x25, 0x11, 0x96, 0xfa, 0xb3, 0x4e, 0x60, 0xab, 0x17, 0x23, 0x4d,
	0x71, 0x88, 0xb7, 0x6a, 0xf3, 0x9d, 0x0e, 0xb2, 0x9a, 0xb0, 0xfa, 0x1c, 0xd3, 0x41, 0x78, 0xc9,
	0x6c, 0x7c, 0x35, 0xc1, 0x24, 0xb5, 0x7e, 0x37, 0xa0, 0x31, 0x85, 0x92, 0x88, 0x85, 0x09, 0xf2,
	0x5c, 0x6b, 0xdb, 0x21, 0x0d, 0x50, 0xe7, 0x5a, 0x61, 0x43, 0x1a, 0x20, 0xf9, 0x0a, 0x48, 0xc8,
	0x3c, 0x74, 0x5c, 0x16, 0x5e, 0xfa, 0x57, 0x93, 0x98, 0xa6, 0xbc, 0x28, 0x15, 0xe1, 0xc4, 0xaa,
	0x74, 0xa2, 0x9f, 0xba, 0xde, 0x90, 0x79, 0x68, 0xaf, 0x71, 0xcd, 0x5e, 0x56, 0x91, 0xec, 0x02,
	0x88, 0x6a, 0x26, 0x29, 0x4d, 0xb1, 0xb5, 0x2c, 0xb6, 0x35, 0x66, 0xdb, 0x46, 0x1c, 0xb6, 0xeb,
	0xa8, 0x97, 0xd6, 0x11, 0x6c, 0x9e, 0x47, 0x1e, 0x4d, 0xb1, 0x1f, 0x7a, 0x11, 0xf3, 0xc3, 0x34,
	0x51, 0xfe, 0x73, 0x4b, 0xaa, 0x75, 0x02, 0x1a, 0xa9, 0x2c, 0x28, 0x4b, 0xc7, 0x02, 0x3f, 0xa6,
	0x91, 0x5d, 0x0f, 0xf4, 0xd2, 0xfa, 0x02, 0xea, 0x53, 0x9c, 0x3c, 0x81, 0xaa, 0x94, 0x24, 0x2d,
	0xa3, 0x53, 0xea, 0x9a, 0xfb, 0xeb, 0xb9, 0x9d, 0x22, 0x2d, 0x5a, 0xc7, 0x1a, 0xc1, 0xca, 0x9c,
	0x84, 0x10, 0x28, 0x8b, 0x04, 0x19, 0x22, 0x41, 0x62, 0x4d, 0x9a, 0x50, 0xf2, 0xc2, 0x44, 0xe5,
	0x8c, 0x2f, 0x79, 0x33, 0x52, 0xcf, 0x8b, 0x31, 0x49, 0x30, 0x69, 0x95, 0x3a, 0xa5, 0x6e, 0xdd,
	0x9e, 0x01, 0xd6, 0x36, 0x6c, 0x15, 0x42, 0x93, 0x75, 0xb0, 0x7e, 0x32, 0x00, 0x64, 0x7b, 0x89,
	0xd3, 0xf2, 0x23, 0x60, 0x14, 0x46, 0x60, 0xbe, 0xef, 0x97, 0xf2, 0x7d, 0x9f, 0xef, 0x99, 0xd2,
	0x3b, 0xf5, 0x8c, 0x0b, 0xeb, 0xbc, 0xe9, 0x58, 0xa8, 0x52, 0x7e, 0x84, 0xd4, 0xc3, 0x98, 0x3c,
	0x86, 0xe6, 0x58, 0xac, 0x92, 0x6b, 0x3f, 0x72, 0x52, 0x76, 0x83, 0xda, 0xa3, 0xc6, 0x0c, 0x3f,
	0xe3, 0xf0, 0x3b, 0xf4, 0x93, 0xf5, 0x87, 0x01, 0x8d, 0x67, 0x4c, 0x06, 0xab, 0x4b, 0xfb, 0x09,
	0x2c, 0x5f, 0x0b, 0x4b, 0xaa, 0xac, 0xdb, 0xca, 0xd1, 0xa2, 0x33, 0xb6, 0x52, 0x24, 0x2d, 0xa8,
	0xf2, 0xa1, 0xa4, 0x57, 0xfa, 0x10, 0xfd, 0x4b, 0x3e, 0x86, 0xfb, 0x74, 0x3c, 0x66, 0xb7, 0x0e,
	0xbb, 0xbc, 0x1c, 0xfb, 0xe1, 0x74, 0xf2, 0xcb, 0x1d, 0xa3, 0x5b, 0xb3, 0x89, 0x90, 0x9d, 0x48,
	0x91, 0xf4, 0x82, 0xec, 0x40, 0xd9, 0x0f, 0x2f, 0x99, 0xe2, 0x86, 0xa6, 0x3c, 0x7c, 0x56, 0x0e,
	0x5b, 0x48, 0xad, 0x0f, 0xa0, 0x39, 0xf3, 0x5b, 0xcd, 0xcf, 0x82, 0xb6, 0xb0, 0x7e, 0x34, 0xb8,
	0xa2, 0xe2, 0x8c, 0xff, 0x24, 0xc2, 0xf7, 0xc0, 0x94, 0x31, 0xc9, 0x24, 0x97, 0x85, 0x14, 0x24,
	0x24, 0x72, 0xbc, 0x0e, 0x6b, 0x19, 0x0f, 0x54, 0x8f, 0x3d, 0x83, 0xc6, 0x28, 0x65, 0x11, 0x9f,
	0xba, 0x7f, 0xef, 0x95, 0x45, 0xa0, 0x39, 0xb3, 0xa2, 0xbb, 0x77, 0x09, 0xc8, 0x0b, 0xe6, 0x87,
	0xaa, 0xb1, 0xee, 0x10, 0xf3, 0x23, 0xa8, 0x44, 0xd7, 0x34, 0x91, 0x11, 0xaf, 0xee, 0x9b, 0x72,
	0xc7, 0x29, 0x87, 0x6c, 0x29, 0x21, 0xef, 0xc3, 0x8a, 0x6e, 0x31, 0xd9, 0x8a, 0x32, 0x7c, 0xdd,
	0x77, 0xb2, 0x0f, 0x77, 0xa0, 0xc2, 0xa9, 0x28, 0x69, 0x55, 0xc4, 0xb0, 0xe7, 0x79, 0x4a, 0x0a,
	0xc9, 0x63, 0xa8, 0x51, 0xcf, 0x73, 0xf8, 0x8f, 0x62, 0xa6, 0xbc, 0x62, 0x95, 0x7a, 0x62, 0x51,
	0x98, 0xc8, 0x6a, 0xf1, 0x52, 0xda, 0x80, 0xf5, 0xb9, 0x24, 0xa8, 0xe4, 0xfc, 0x62, 0x00, 0xb1,
	0x51, 0xb3, 0x27, 0xde, 0x29, 0x39, 0xf3, 0x3e, 0x40, 0x91, 0x15, 0x3a, 0x60, 0xbe, 0x9a, 0xd0,
	0x98, 0x86, 0xa9, 0x1f, 0xa2, 0xd7, 0x32, 0x45, 0xcb, 0x67, 0x21, 0xee, 0xe5, 0x9c, 0x37, 0xca,
	0xcb, 0x9f, 0x0d, 0x30, 0x79, 0xd4, 0xca, 0x7b, 0x3e, 0x44, 0x1e, 0x26, 0x7e, 0x8c, 0x9e, 0x33,
	0x25, 0x12, 0xff, 0x0d, 0xaa, 0xfb, 0x9a, 0x28, 0x99, 0x66, 0x12, 0xff, 0xcd, 0x82, 0xba, 0x54,
	0xde, 0x56, 0x97, 0xea, 0x5b, 0xea, 0x62, 0xfd, 0x6a, 0x40, 0x4d, 0x63, 0x0b, 0x99, 0xf7, 0x01,
	0xd4, 0x23, 0xc4, 0xd8, 0x99, 0xc4, 0x63, 0xce, 0xbf, 0x9c, 0x67, 0x6b, 0x1c, 0x38, 0x8f, 0xc7,
	0x09, 0x9f, 0x0e, 0x77, 0xec, 0x63, 0x98, 0x4a, 0xb1, 0xa4, 0x61, 0x90, 0x90, 0x50, 0x78, 0x0a,
	0x5b, 0x99, 0x8c, 0x38, 0x59, 0xe5, 0xb2, 0x50, 0xde, 0xc8, 0x88, 0x7b, 0xd3, 0x7d, 0xd6, 0x6f,
	0x06, 0xd4, 0xa7, 0x77, 0x16, 0x3f, 0x26, 0xc4, 0x5b, 0x9d, 0x1d, 0xe1, 0x5e, 0xcd, 0x86, 0x70,
	0x7a, 0x7d, 0x93, 0x8f, 0xa0, 0xaa, 0x85, 0x4b, 0x59, 0xfa, 0xcd, 0xa4, 0xd9, 0xd6, 0x1a, 0x85,
	0xda, 0x96, 0xfe, 0xb1, 0xb6, 0xe5, 0x42, 0x6d, 0x3f, 0xa4, 0x50, 0x11, 0xa3, 0x42, 0xd6, 0x60,
	0xe5, 0xf4, 0xe8, 0x60, 0xd4, 0x77, 0xce, 0x87, 0x5f, 0x0f, 0x4f, 0xbe, 0x1d, 0x36, 0xff, 0x37,
	0x83, 0x4e, 0xed, 0xfe, 0xe9, 0x81, 0xdd, 0x6f, 0x1a, 0x64, 0x1b, 0x36, 0x24, 0x34, 0x18, 0x0e,
	0xce, 0x06, 0x07, 0x2f, 0x9d, 0xde, 0xcb, 0xf3, 0xd1, 0x59, 0xdf, 0x6e, 0x2e, 0x91, 0x2d, 0x58,
	0x97, 0xa2, 0x17, 0x27, 0x83, 0xa1, 0xd3, 0xff, 0x6e, 0x30, 0x3a, 0x1b, 0x0c, 0x9f, 0x37, 0x4b,
	0xfb, 0x7f, 0x96, 0x80, 0xf0, 0x00, 0x8e, 0x69, 0x48, 0xaf, 0x30, 0x1e, 0x61, 0xfc, 0xda, 0x77,
	0x91, 0x3c, 0x85, 0xaa, 0x7a, 0x5a, 0x90, 0xfb, 0x32, 0xca, 0xf9, 0xc7, 0x47, 0x7b, 0x23, 0x87,
	0x2a, 0xfe, 0x1c, 0x42, 0x23, 0x77, 0x25, 0x92, 0x87, 0x52, 0x73, 0xf1, 0x23, 0xa0, 0xfd, 0xff,
	0xbf, 0x91, 0x2a, 0x7b, 0x87, 0x60, 0x66, 0x66, 0x90, 0xb4, 0xa4, 0x76, 0x91, 0x9b, 0xda, 0xdb,
	0x0b, 0x24, 0x33, 0x1b, 0x99, 0x09, 0xd1, 0x36, 0x8a, 0x23, 0xac, 0x6d, 0x2c, 0x18, 0x27, 0xf2,
	0x39, 0xd4, 0xf4, 0x5d, 0x41, 0x54, 0xe8, 0xb9, 0x3b, 0xaf, 0xbd, 0x99, 0x87, 0xd5, 0xd6, 0x2f,
	0xa1, 0x3e, 0xe5, 0x6e, 0x32, 0x55, 0x9a, 0xbf, 0x4e, 0xda, 0x5b, 0x05, 0x7c, 0x76, 0xb0, 0xa6,
	0x67, 0x7d, 0x70, 0x8e, 0xf4, 0xf5, 0xc1, 0x79, 0x16, 0x3f, 0xdc, 0xf9, 0xde, 0xba, 0x61, 0x11,
	0xee, 0xfa, 0x4c, 0x3c, 0xe4, 0x9f, 0x04, 0xb2, 0xc4, 0x7b, 0x73, 0x6f, 0xfc, 0x8b, 0x65, 0xf1,
	0xb8, 0xff, 0xf4, 0xaf, 0x00, 0x00, 0x00, 0xff, 0xff, 0xdb, 0x03, 0x79, 0x28, 0xfb, 0x0b, 0x00,
	0x00,
}
